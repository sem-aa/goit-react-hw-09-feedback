{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","components/Feedback/Feedback.js","App.js","reportWebVitals.js","index.js","components/Statistics/Statistics.module.css"],"names":["module","exports","ids","require","FeedbackOptions","options","onLeaveFeedback","map","option","className","s","button","name","type","onClick","generate","Statistics","good","neutral","bad","total","positive","feedback","appraisal","Section","title","children","Notification","message","Feedback","useState","setGood","setNeutral","setBad","countTotalFeedback","countPositiveFeedbackPercentage","toFixed","useCallback","e","target","prevGood","prevNeutral","prevBad","Object","keys","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iIACAA,EAAOC,QAAU,CAAC,OAAS,kC,2ZCEvBC,EAAMC,EAAQ,KAoBHC,EAlBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,+BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAEEC,UAAWC,IAAEC,OACbC,KAAMJ,EACNK,KAAK,SACLC,QAASR,EALX,SAOGE,GANIN,EAAIa,eAUb,gD,iBCJWC,EAZI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,SAA9B,OACjB,gCACE,sBAAKZ,UAAWC,IAAEY,SAAlB,UACE,oBAAGb,UAAWC,IAAEa,UAAhB,mBAAkCN,KAClC,oBAAGR,UAAWC,IAAEa,UAAhB,sBAAqCL,KACrC,oBAAGT,UAAWC,IAAEa,UAAhB,kBAAiCJ,QAEnC,uCAAUC,EAAV,OACA,mDAAsBC,EAAtB,WCFWG,MATf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,gCACGD,GAAS,6BAAKA,IACdC,MCAQC,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,6BAAKA,KCI5B,SAASC,IAAY,IAAD,EACTC,mBAAS,GADA,mBAC1Bb,EAD0B,KACpBc,EADoB,OAEHD,mBAAS,GAFN,mBAE1BZ,EAF0B,KAEjBc,EAFiB,OAGXF,mBAAS,GAHE,mBAG1BX,EAH0B,KAGrBc,EAHqB,KAK3BC,EAAqBjB,EAAOC,EAAUC,EACtCgB,GACHlB,GAAQA,EAAOC,EAAUC,GAC1B,KACAiB,QAAQ,GAEJ/B,EAAU,CAAEY,OAAMC,UAASC,OAE3Bb,EAAkB+B,uBAAY,SAACC,GAGnC,OAFaA,EAAEC,OAAO3B,MAGpB,IAAK,OACHmB,GAAQ,SAACS,GAAD,OAAcA,EAAW,KACjC,MACF,IAAK,UACHR,GAAW,SAACS,GAAD,OAAiBA,EAAc,KAC1C,MACF,IAAK,MACHR,GAAO,SAACS,GAAD,OAAaA,EAAU,QAKjC,IAEH,OACE,eAAC,EAAD,CAASjB,MAAM,wBAAf,UACE,cAAC,EAAD,CACEpB,QAASsC,OAAOC,KAAKvC,GACrBC,gBAAiBA,IAGK,IAAvB4B,EACC,cAAC,EAAD,CACEjB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOc,EACPb,SAAUc,IAGZ,cAAC,EAAD,CAAcP,QAAQ,yBC9CfiB,MAJf,WACE,OAAO,cAAChB,EAAD,KCQMiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,mBCfA9C,EAAOC,QAAU,CAAC,SAAW,6BAA6B,UAAY,iC","file":"static/js/main.c99da0dd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__2oDf1\"};","import React from \"react\";\r\nimport s from \"./FeedbackOptions.module.css\";\r\n\r\nvar ids = require(\"short-id\");\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <ul>\r\n    {options.map((option) => (\r\n      <button\r\n        key={ids.generate()}\r\n        className={s.button}\r\n        name={option}\r\n        type=\"button\"\r\n        onClick={onLeaveFeedback}\r\n      >\r\n        {option}\r\n      </button>\r\n    ))}\r\n\r\n    <h2>Statistics</h2>\r\n  </ul>\r\n);\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport s from \"./Statistics.module.css\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positive }) => (\r\n  <div>\r\n    <div className={s.feedback}>\r\n      <p className={s.appraisal}>Good: {good}</p>\r\n      <p className={s.appraisal}>Neutral: {neutral}</p>\r\n      <p className={s.appraisal}>Bad: {bad}</p>\r\n    </div>\r\n    <p>Total:{total}:</p>\r\n    <p>Positive feedback:{positive}%</p>\r\n  </div>\r\n);\r\n\r\nexport default Statistics;\r\n","function Section({ title, children }) {\r\n  return (\r\n    <div>\r\n      {title && <h2>{title}</h2>}\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => <h3>{message}</h3>;\r\n\r\nexport default Notification;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport FeedbackOptions from \"../FeedbackOptions/FeedbackOptions\";\r\nimport Statistics from \"../Statistics/Statistics\";\r\nimport Section from \"../Section/Section\";\r\nimport Notification from \"../Notification/Notification\";\r\n\r\nexport default function Feedback() {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const countTotalFeedback = good + neutral + bad;\r\n  const countPositiveFeedbackPercentage = (\r\n    (good / (good + neutral + bad)) *\r\n    100\r\n  ).toFixed(0);\r\n\r\n  const options = { good, neutral, bad };\r\n\r\n  const onLeaveFeedback = useCallback((e) => {\r\n    const name = e.target.name;\r\n\r\n    switch (name) {\r\n      case \"good\":\r\n        setGood((prevGood) => prevGood + 1);\r\n        break;\r\n      case \"neutral\":\r\n        setNeutral((prevNeutral) => prevNeutral + 1);\r\n        break;\r\n      case \"bad\":\r\n        setBad((prevBad) => prevBad + 1);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Section title=\"Please leave feedback\">\r\n      <FeedbackOptions\r\n        options={Object.keys(options)}\r\n        onLeaveFeedback={onLeaveFeedback}\r\n      />\r\n\r\n      {countTotalFeedback !== 0 ? (\r\n        <Statistics\r\n          good={good}\r\n          neutral={neutral}\r\n          bad={bad}\r\n          total={countTotalFeedback}\r\n          positive={countPositiveFeedbackPercentage}\r\n        />\r\n      ) : (\r\n        <Notification message=\"No feedback given\" />\r\n      )}\r\n    </Section>\r\n  );\r\n}\r\n\r\n// class Feedback extends React.Component {\r\n//   state = {\r\n//     good: 0,\r\n//     neutral: 0,\r\n//     bad: 0,\r\n//   };\r\n\r\n//   onLeaveFeedback = (e) => {\r\n//     this.setState((prevState) => ({\r\n//       [e.target.name]: prevState[e.target.name] + 1,\r\n//     }));\r\n//   };\r\n\r\n//   render() {\r\n//     const { good, neutral, bad } = this.state;\r\n\r\n//     const countTotalFeedback = good + neutral + bad;\r\n//     const countPositiveFeedbackPercentage = (\r\n//       (good / (good + neutral + bad)) *\r\n//       100\r\n//     ).toFixed(0);\r\n\r\n//     return (\r\n//       <Section title=\"Please leave feedback\">\r\n//         <FeedbackOptions\r\n//           options={Object.keys(this.state)}\r\n//           onLeaveFeedback={this.onLeaveFeedback}\r\n//         />\r\n\r\n//         {countTotalFeedback !== 0 ? (\r\n//           <Statistics\r\n//             good={good}\r\n//             neutral={neutral}\r\n//             bad={bad}\r\n//             total={countTotalFeedback}\r\n//             positive={countPositiveFeedbackPercentage}\r\n//           />\r\n//         ) : (\r\n//           <Notification message=\"No feedback given\" />\r\n//         )}\r\n//       </Section>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Feedback;\r\n","import \"./App.css\";\r\nimport Feedback from \"./components/Feedback/Feedback\";\r\n\r\nfunction App() {\r\n  return <Feedback />;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedback\":\"Statistics_feedback__2ZLJ6\",\"appraisal\":\"Statistics_appraisal__2iNdr\"};"],"sourceRoot":""}